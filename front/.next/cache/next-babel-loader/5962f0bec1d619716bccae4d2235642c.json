{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, fork } from 'redux-saga/effects';\nimport postSaga from './post';\nimport userSaga from './user'; // all로 등록\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return all([fork(postSaga), fork(userSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n} // 제너레이터 --> function*\n// 제너레이터 실행 법 --> 함수명().next() 로 실행된다.\n// yield --> 일드 --> 중단점 --> 일드가 있는부분에서 멈춘다.\n// 제너레이터는 안에 일드를 넣어주면 그 부분에서 멈춘다.\n// saga에서는 절대 멈추지 않는 제너레이터가 있다.\n// let i = 0;\n// const gen = function* () {\n//   while (true) {\n//     yield i++;\n//   }\n// };\n// call 과 fork의 차이\n// fork 는 비동기 호출 --> 요청보내고 결과 기다리는거 상관없이 바로 다음거 실행된다.\n// call 은 동기 호출 --> 리턴할때까지 기다렸다가 호출된다.\n// saga effect\n// all, fork, call, take, put, delay, debounce, throttle, takeLatest, takeMaybe 등이 있다.","map":{"version":3,"sources":["/Users/gangdongjae/Desktop/inflearn/React-NodeBird-Next.js_with ZeroCho/code/source_code/react-nodebird-master/prepare/front/sagas/index.js"],"names":["rootSaga","all","fork","postSaga","userSaga"],"mappings":";;oDAMyBA,Q;;AANzB,SAASC,GAAT,EAAcC,IAAd,QAA0B,oBAA1B;AAEA,OAAOC,QAAP,MAAqB,QAArB;AACA,OAAOC,QAAP,MAAqB,QAArB,C,CAEA;;AACA,eAAe,SAAUJ,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACC,IAAI,CAACC,QAAD,CAAL,EAAiBD,IAAI,CAACE,QAAD,CAArB,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAIf;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA","sourcesContent":["import { all, fork } from 'redux-saga/effects';\n\nimport postSaga from './post';\nimport userSaga from './user';\n\n// all로 등록\nexport default function* rootSaga() {\n  yield all([fork(postSaga), fork(userSaga)]);\n}\n\n// 제너레이터 --> function*\n// 제너레이터 실행 법 --> 함수명().next() 로 실행된다.\n// yield --> 일드 --> 중단점 --> 일드가 있는부분에서 멈춘다.\n// 제너레이터는 안에 일드를 넣어주면 그 부분에서 멈춘다.\n\n// saga에서는 절대 멈추지 않는 제너레이터가 있다.\n// let i = 0;\n// const gen = function* () {\n//   while (true) {\n//     yield i++;\n//   }\n// };\n\n// call 과 fork의 차이\n// fork 는 비동기 호출 --> 요청보내고 결과 기다리는거 상관없이 바로 다음거 실행된다.\n// call 은 동기 호출 --> 리턴할때까지 기다렸다가 호출된다.\n\n// saga effect\n// all, fork, call, take, put, delay, debounce, throttle, takeLatest, takeMaybe 등이 있다.\n"]},"metadata":{},"sourceType":"module"}