{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nvar initailState = {\n  user: {},\n  post: {}\n}; // reducer는 (이전상태, 액션) => 다음상태\n\nvar rootReducer = function rootReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initailState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case HYDRATE:\n      console.log('HYDRATE', action);\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer; // aciton creator  --> 다음엔 --> async action creator 가 나온다.\n// const changeNickname = (data) => {\n//   return {\n//     type: 'CHANGE_NICKNAME',\n//     data,\n//   };\n// };\n// changeNickname('KDONG');\n// {\n//   type: 'CHANGE_NICKNAME',\n//   data: 'KDONG'\n// }\n// store.dispatch(changeNickname('KDONG'));","map":{"version":3,"sources":["/Users/gangdongjae/Desktop/inflearn/[리뉴얼] React로 NodeBird SNS 만들기/code/source_code/react-nodebird-master/prepare/front/reducers/index.js"],"names":["HYDRATE","initailState","user","post","rootReducer","state","action","type","console","log","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,EADa;AAEnBC,EAAAA,IAAI,EAAE;AAFa,CAArB,C,CAKA;;AACA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBJ,YAAyB;AAAA,MAAXK,MAAW;;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,OAAL;AACEQ,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,MAAvB;AACA,6CACKD,KADL,GAEKC,MAAM,CAACI,OAFZ;;AAKF;AACE,aAAOL,KAAP;AATJ;AAWD,CAZD;;AAcA,eAAeD,WAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\n\nconst initailState = {\n  user: {},\n  post: {},\n};\n\n// reducer는 (이전상태, 액션) => 다음상태\nconst rootReducer = (state = initailState, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      console.log('HYDRATE', action);\n      return {\n        ...state,\n        ...action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;\n\n// aciton creator  --> 다음엔 --> async action creator 가 나온다.\n// const changeNickname = (data) => {\n//   return {\n//     type: 'CHANGE_NICKNAME',\n//     data,\n//   };\n// };\n// changeNickname('KDONG');\n// {\n//   type: 'CHANGE_NICKNAME',\n//   data: 'KDONG'\n// }\n// store.dispatch(changeNickname('KDONG'));\n"]},"metadata":{},"sourceType":"module"}