{"ast":null,"code":"import { all, fork, put, takeLatest, delay } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction logInAPI() {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.resopnse.data\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: 'LOG_OUT_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_OUT_FAILURE',\n      data: err.resopnse.data\n    });\n  }\n} // 이벤트 리스너(?) 만들고\n\n\nfunction* watchLogIn() {\n  // yield take(\"LOG_IN_REQUEST\", logIn);\n  yield takeLatest('LOG_IN_REQUEST', logIn); // --> 치명적 단점,,, 일회용이다. 해결방법 -->  while 로 감싼다.  --> while 대신에 takeEvery를 사용한다.\n  // takeLatest --> 100번을 동시에 눌러도 마지막 1번꺼만 실행된다.\n}\n\nfunction* watchLogOut() {\n  yield takeLatest('LOG_OUT_REQUEST', logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["/Users/gangdongjae/Desktop/inflearn/React-NodeBird-Next.js_with ZeroCho/code/source_code/react-nodebird-master/prepare/front/sagas/user.js"],"names":["all","fork","put","takeLatest","delay","axios","logInAPI","post","data","logIn","action","type","result","err","resopnse","logOutAPI","logOut","watchLogIn","watchLogOut","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,KAArC,QAAkD,oBAAlD;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,GAAoB;AAClB,SAAOD,KAAK,CAACE,IAAN,CAAW,YAAX,EAAyBC,IAAzB,CAAP;AACD;;AAED,UAAUC,KAAV,CAAgBC,MAAhB,EAAwB;AACtB,MAAI;AACF;AACA,UAAMN,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACRS,MAAAA,IAAI,EAAE,gBADE;AAERH,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOK,GAAP,EAAY;AACZ,UAAMX,GAAG,CAAC;AACRS,MAAAA,IAAI,EAAE,gBADE;AAERH,MAAAA,IAAI,EAAEK,GAAG,CAACC,QAAJ,CAAaN;AAFX,KAAD,CAAT;AAID;AACF;;AAED,SAASO,SAAT,GAAqB;AACnB,SAAOV,KAAK,CAACE,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUS,MAAV,GAAmB;AACjB,MAAI;AACF;AACA,UAAMZ,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACRS,MAAAA,IAAI,EAAE,iBADE;AAERH,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFL,KAAD,CAAT;AAID,GAPD,CAOE,OAAOK,GAAP,EAAY;AACZ,UAAMX,GAAG,CAAC;AACRS,MAAAA,IAAI,EAAE,iBADE;AAERH,MAAAA,IAAI,EAAEK,GAAG,CAACC,QAAJ,CAAaN;AAFX,KAAD,CAAT;AAID;AACF,C,CAED;;;AACA,UAAUS,UAAV,GAAuB;AACrB;AACA,QAAMd,UAAU,CAAC,gBAAD,EAAmBM,KAAnB,CAAhB,CAFqB,CAGrB;AACA;AACD;;AAED,UAAUS,WAAV,GAAwB;AACtB,QAAMf,UAAU,CAAC,iBAAD,EAAoBa,MAApB,CAAhB;AACD;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAClC,QAAMnB,GAAG,CAAC,CAACC,IAAI,CAACgB,UAAD,CAAL,EAAmBhB,IAAI,CAACiB,WAAD,CAAvB,CAAD,CAAT;AACD","sourcesContent":["import { all, fork, put, takeLatest, delay } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction logInAPI() {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.resopnse.data,\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: 'LOG_OUT_SUCCESS',\n      data: result.data,\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_OUT_FAILURE',\n      data: err.resopnse.data,\n    });\n  }\n}\n\n// 이벤트 리스너(?) 만들고\nfunction* watchLogIn() {\n  // yield take(\"LOG_IN_REQUEST\", logIn);\n  yield takeLatest('LOG_IN_REQUEST', logIn);\n  // --> 치명적 단점,,, 일회용이다. 해결방법 -->  while 로 감싼다.  --> while 대신에 takeEvery를 사용한다.\n  // takeLatest --> 100번을 동시에 눌러도 마지막 1번꺼만 실행된다.\n}\n\nfunction* watchLogOut() {\n  yield takeLatest('LOG_OUT_REQUEST', logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}\n"]},"metadata":{},"sourceType":"module"}