{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nvar initailState = {\n  user: {\n    isLoggedIn: false,\n    user: null,\n    signUpData: {},\n    loginData: {}\n  },\n  post: {\n    mainPosts: []\n  }\n};\nexport var loginAction = function loginAction(data) {\n  return {\n    type: 'LOG_IN',\n    data: data\n  };\n};\nexport var logoutAction = function logoutAction() {\n  return {\n    type: 'LOG_OUT'\n  };\n}; // reducer는 (이전상태, 액션) => 다음상태\n\nvar rootReducer = function rootReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initailState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case HYDRATE:\n      console.log('HYDRATE', action);\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case 'LOG_IN':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: true,\n          user: action.data\n        })\n      });\n\n    case 'LOG_OUT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: false,\n          user: null\n        })\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer; // aciton creator  --> 다음엔 --> async action creator 가 나온다.\n// const changeNickname = (data) => {\n//   return {\n//     type: 'CHANGE_NICKNAME',\n//     data,\n//   };\n// };\n// changeNickname('KDONG');\n// {\n//   type: 'CHANGE_NICKNAME',\n//   data: 'KDONG'\n// }\n// store.dispatch(changeNickname('KDONG'));","map":{"version":3,"sources":["/Users/gangdongjae/Desktop/inflearn/[리뉴얼] React로 NodeBird SNS 만들기/code/source_code/react-nodebird-master/prepare/front/reducers/index.js"],"names":["HYDRATE","initailState","user","isLoggedIn","signUpData","loginData","post","mainPosts","loginAction","data","type","logoutAction","rootReducer","state","action","console","log","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,UAAU,EAAE,KADR;AAEJD,IAAAA,IAAI,EAAE,IAFF;AAGJE,IAAAA,UAAU,EAAE,EAHR;AAIJC,IAAAA,SAAS,EAAE;AAJP,GADa;AAOnBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,SAAS,EAAE;AADP;AAPa,CAArB;AAYA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD,EAAU;AACnC,SAAO;AACLC,IAAAA,IAAI,EAAE,QADD;AAELD,IAAAA,IAAI,EAAJA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,IAAME,YAAY,GAAG,SAAfA,YAAe,GAAM;AAChC,SAAO;AACLD,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM,C,CAMP;;AACA,IAAME,WAAW,GAAG,SAAdA,WAAc,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBZ,YAAyB;AAAA,MAAXa,MAAW;;AACpD,UAAQA,MAAM,CAACJ,IAAf;AACE,SAAKV,OAAL;AACEe,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,MAAvB;AACA,6CAAYD,KAAZ,GAAsBC,MAAM,CAACG,OAA7B;;AACF,SAAK,QAAL;AACE,6CACKJ,KADL;AAEEX,QAAAA,IAAI,kCACCW,KAAK,CAACX,IADP;AAEFC,UAAAA,UAAU,EAAE,IAFV;AAGFD,UAAAA,IAAI,EAAEY,MAAM,CAACL;AAHX;AAFN;;AAQF,SAAK,SAAL;AACE,6CACKI,KADL;AAEEX,QAAAA,IAAI,kCACCW,KAAK,CAACX,IADP;AAEFC,UAAAA,UAAU,EAAE,KAFV;AAGFD,UAAAA,IAAI,EAAE;AAHJ;AAFN;;AAQF;AACE,aAAOW,KAAP;AAvBJ;AAyBD,CA1BD;;AA4BA,eAAeD,WAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\n\nconst initailState = {\n  user: {\n    isLoggedIn: false,\n    user: null,\n    signUpData: {},\n    loginData: {},\n  },\n  post: {\n    mainPosts: [],\n  },\n};\n\nexport const loginAction = (data) => {\n  return {\n    type: 'LOG_IN',\n    data,\n  };\n};\n\nexport const logoutAction = () => {\n  return {\n    type: 'LOG_OUT',\n  };\n};\n\n// reducer는 (이전상태, 액션) => 다음상태\nconst rootReducer = (state = initailState, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      console.log('HYDRATE', action);\n      return { ...state, ...action.payload };\n    case 'LOG_IN':\n      return {\n        ...state,\n        user: {\n          ...state.user,\n          isLoggedIn: true,\n          user: action.data,\n        },\n      };\n    case 'LOG_OUT':\n      return {\n        ...state,\n        user: {\n          ...state.user,\n          isLoggedIn: false,\n          user: null,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;\n\n// aciton creator  --> 다음엔 --> async action creator 가 나온다.\n// const changeNickname = (data) => {\n//   return {\n//     type: 'CHANGE_NICKNAME',\n//     data,\n//   };\n// };\n// changeNickname('KDONG');\n// {\n//   type: 'CHANGE_NICKNAME',\n//   data: 'KDONG'\n// }\n// store.dispatch(changeNickname('KDONG'));\n"]},"metadata":{},"sourceType":"module"}